{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Setup","text":""},{"location":"#setup","title":"Setup","text":""},{"location":"#gradle-plugin","title":"Gradle Plugin","text":"<p>This repository contains basic implementation for version catalogs and build-convention</p> <p>You can use it as fork, or just setup it via plugin \u2193</p>"},{"location":"#setup-as-plugins","title":"Setup as plugins","text":"(Click to expand) libs.version.toml <pre><code>[versions]\n# klibs\nklibs-gradleplugin = \"&lt;latest-version&gt;\"\n\n[plugins]\n# Core\nklibs-gradle-detekt = { id = \"ru.astrainteractive.gradleplugin.detekt\", version.ref = \"klibs-gradleplugin\" }\nklibs-gradle-detekt-compose = { id = \"ru.astrainteractive.gradleplugin.detekt.compose\", version.ref = \"klibs-gradleplugin\" }\nklibs-gradle-dokka-root = { id = \"ru.astrainteractive.gradleplugin.dokka.root\", version.ref = \"klibs-gradleplugin\" }\nklibs-gradle-dokka-module = { id = \"ru.astrainteractive.gradleplugin.dokka.module\", version.ref = \"klibs-gradleplugin\" }\nklibs-gradle-java-core = { id = \"ru.astrainteractive.gradleplugin.java.core\", version.ref = \"klibs-gradleplugin\" }\nklibs-gradle-stub-javadoc = { id = \"ru.astrainteractive.gradleplugin.stub.javadoc\", version.ref = \"klibs-gradleplugin\" }\nklibs-gradle-publication = { id = \"ru.astrainteractive.gradleplugin.publication\", version.ref = \"klibs-gradleplugin\" }\nklibs-gradle-kmp-signing = { id = \"ru.astrainteractive.gradleplugin.kmp-signing\", version.ref = \"klibs-gradleplugin\" }\nklibs-gradle-rootinfo = { id = \"ru.astrainteractive.gradleplugin.root.info\", version.ref = \"klibs-gradleplugin\" }\n# Android\nklibs-gradle-android-core = { id = \"ru.astrainteractive.gradleplugin.android.core\", version.ref = \"klibs-gradleplugin\" }\nklibs-gradle-android-compose = { id = \"ru.astrainteractive.gradleplugin.android.compose\", version.ref = \"klibs-gradleplugin\" }\nklibs-gradle-android-apk-sign = { id = \"ru.astrainteractive.gradleplugin.android.apk.sign\", version.ref = \"klibs-gradleplugin\" }\nklibs-gradle-android-apk-name = { id = \"ru.astrainteractive.gradleplugin.android.apk.name\", version.ref = \"klibs-gradleplugin\" }\nklibs-gradle-android-publication = { id = \"ru.astrainteractive.gradleplugin.android.publication\", version.ref = \"klibs-gradleplugin\" }\nklibs-gradle-android-namespace = { id = \"ru.astrainteractive.gradleplugin.android.namespace\", version.ref = \"klibs-gradleplugin\" }\n# Minecrat\nklibs-gradle-minecraft-empty = { id = \"ru.astrainteractive.gradleplugin.minecraft.empty\", version.ref = \"klibs-gradleplugin\" }\nklibs-gradle-minecraft-multiplatform = { id = \"ru.astrainteractive.gradleplugin.minecraft.multiplatform\", version.ref = \"klibs-gradleplugin\" }\n</code></pre> <pre><code>plugins {\n    // klibs - core\n    alias(libs.plugins.klibs.gradle.detekt) apply false\n    alias(libs.plugins.klibs.gradle.detekt.compose) apply false\n    alias(libs.plugins.klibs.gradle.dokka.root) apply false\n    alias(libs.plugins.klibs.gradle.dokka.module) apply false\n    alias(libs.plugins.klibs.gradle.java.core) apply false\n    alias(libs.plugins.klibs.gradle.stub.javadoc) apply false\n    alias(libs.plugins.klibs.gradle.publication) apply false\n    alias(libs.plugins.klibs.gradle.rootinfo) apply false\n    // klibs - android\n    alias(libs.plugins.klibs.gradle.android.core) apply false\n    alias(libs.plugins.klibs.gradle.android.compose) apply false\n    alias(libs.plugins.klibs.gradle.android.apk.sign) apply false\n    alias(libs.plugins.klibs.gradle.android.apk.name) apply false\n    alias(libs.plugins.klibs.gradle.android.publication) apply false\n    alias(libs.plugins.klibs.gradle.android.namespace) apply false\n    // klibs - minecraft\n    alias(libs.plugins.klibs.gradle.minecraft.empty) apply false\n    alias(libs.plugins.klibs.gradle.minecraft.multiplatform) apply false\n}\n</code></pre>"},{"location":"#setup-as-classpath","title":"Setup as classpath","text":"(Click to expand) Root build.gradle.kts  **libs.version.toml**  In your root `build.gradle.kts`  <pre><code>buildscript {\n    dependencies {\n        // core gradle convention\n        classpath(\"ru.astrainteractive.gradleplugin:convention:&lt;latest-version&gt;&gt;\")\n        // android-specific\n        classpath(\"ru.astrainteractive.gradleplugin:android:&lt;latest-version&gt;&gt;\")\n        // minecraft-specific\n        classpath(\"ru.astrainteractive.gradleplugin:minecraft:&lt;latest-version&gt;&gt;\")\n    }\n}\n// If you are too lazy to define it in each gralde.kts, just paste it in root\n\n// Apply dokka root and detekt for all project\napply(plugin = \"ru.astrainteractive.gradleplugin.dokka.root\")\napply(plugin = \"ru.astrainteractive.gradleplugin.detekt\")\n// For subprojects apply dokkaModule, pulication, infor and java.core if module have kotlin.jvm\nsubprojects.forEach {\n    it.apply(plugin = \"ru.astrainteractive.gradleplugin.dokka.module\")\n    it.apply(plugin = \"ru.astrainteractive.gradleplugin.publication\")\n    it.apply(plugin = \"ru.astrainteractive.gradleplugin.root.info\")\n    it.plugins.withId(\"org.jetbrains.kotlin.jvm\") {\n        it.apply(plugin = \"ru.astrainteractive.gradleplugin.java.core\")\n    }\n}\n</code></pre>"},{"location":"android/","title":"Android","text":""},{"location":"android/#android-plugins","title":"Android plugins","text":""},{"location":"android/#android-detekt-compose","title":"Android detekt-compose","text":"<p>This plugin is dependent on core-detekt</p> <pre><code>plugins {\n    id(\"ru.astrainteractive.gradleplugin.detekt\")\n}    \n</code></pre>"},{"location":"android/#android-sdk-plugin","title":"Android sdk plugin","text":"<pre><code>plugins {\n    // This plugin will add sdk source/target/min\n    id(\"ru.astrainteractive.gradleplugin.android.core\")\n}    \n</code></pre>"},{"location":"android/#android-compose-plugin","title":"Android compose plugin","text":"<pre><code>plugins {\n    // this will enable buildFeatures.compose\n    // and will set composeOptions.kotlinCompilerExtensionVersion\n    id(\"ru.astrainteractive.gradleplugin.android.compose\")\n}    \n</code></pre> <p>In your gradle.properties</p> <pre><code>makeevrserg.android.kotlinCompilerExtensionVersion=1.5.1\n</code></pre>"},{"location":"android/#android-apk-sign-plugin","title":"Android apk sign plugin","text":"<pre><code>plugins {\n    // this will create default sign config for apk\n    // keystore.jks will be taken from current project folder\n    // if no keystore.jks - no signing configs will be applied\n    id(\"ru.astrainteractive.gradleplugin.android.apk.sign\")\n}    \n</code></pre> <p>In your local.properties</p> <pre><code>KEY_PASSWORD=MY_PASSWORD\nKEY_ALIAS=MY_ALIAS\nSTORE_PASSWORD=MY_STORE_PASSWORD\n</code></pre>"},{"location":"android/#android-publication","title":"Android publication","text":"<pre><code>plugins {\n    // This plugin will take release sources for publish\n    id(\"ru.astrainteractive.gradleplugin.android.publication\")\n\n}\n</code></pre>"},{"location":"android/#android-namespace-plugin","title":"Android namespace plugin","text":"<pre><code>plugins {\n    // This plugin will auto-generate namespace\n    id(\"ru.astrainteractive.gradleplugin.android.namespace\")\n\n}\n</code></pre>"},{"location":"convention/","title":"Core","text":""},{"location":"convention/#property-usage","title":"Property usage","text":"<p>With convention plugin added to classpath you can access to gradle.properties and secret properties, located it your local.properties or System.env in case of CI</p> <pre><code>// This will take makeevrserg.somevar from gradle.properties\nval gradleProperty = target.gradleProperty(\"somevar\").javaVersion\n// This will take makeevrserg.secretvar from local.properties or System.getenv if run by CI\nval gradleProperty = target.secretProperty(\"secretvar\").javaVersion\n</code></pre> <p>But there's one problem. Environment variables doesn't allow to use '.' symbols. So when declare your properties in CI just replace '.' with '_'.</p> <p>Then in your gradle.properties you'll have <code>var.properties.first</code> and in CI env you'll have <code>var_properties_first</code>.</p>"},{"location":"convention/#detekt","title":"Detekt","text":"<pre><code>plugins {\n    // This plugin will apply detekt plugin and it's custom detekt.yml \n    id(\"ru.astrainteractive.gradleplugin.detekt\")\n    // Or if compose exists in this module use detekt-compose\n    id(\"ru.astrainteractive.gradleplugin.detekt.compose\")\n}\n</code></pre> <p>See required properties in Java core</p>"},{"location":"convention/#dokka","title":"Dokka","text":"<pre><code>plugins {\n    // Dokka for root build.gradle.kts\n    // If there's readme - it will be main page of documentation\n    id(\"ru.astrainteractive.gradleplugin.dokka.root\")\n    // Dokka for single module\n    // You can also include README.md inside module\n    // and dokka will create this README as main page\n    id(\"ru.astrainteractive.gradleplugin.dokka.module\")\n}\n</code></pre> <p>See required properties in Java core</p>"},{"location":"convention/#root-info","title":"Root info","text":"<pre><code>plugins {\n    id(\"ru.astrainteractive.gradleplugin.root.info\")\n}\n// This will be applied\ngroup = \"Group from gradle.properties -&gt; makeevrserg.project.group\"\nversion = \"Group from gradle.properties -&gt; makeevrserg.project.version\"\ndescription = \"Group from gradle.properties -&gt; makeevrserg.project.description\"\n</code></pre> <p>In your root gradle.properties</p> <pre><code>makeevrserg.project.name=GradlePlugin\nmakeevrserg.project.group=ru.astrainteractive.gradleplugin\nmakeevrserg.project.version.string=0.0.2\nmakeevrserg.project.description=GradlePlugin for my kotlin projects\nmakeevrserg.project.developers=makeevrserg|Makeev Roman|makeevrserg@gmail.com\n</code></pre>"},{"location":"convention/#java-core","title":"Java core","text":"<pre><code>plugins {\n    // This plugin will not apply kotlin.jvm plugin by itself!!\n    // This plugin will apply sourcesJar, javadocJar()\n    // source/target compatibility\n    // kotlin.options.jvmTarget\n    // And also register java components for maven publication\n    id(\"ru.astrainteractive.gradleplugin.java.core\")\n}\n</code></pre> <p>In your gradle.properties</p> <pre><code>makeevrserg.java.source=8\nmakeevrserg.java.target=11\nmakeevrserg.java.ktarget=11\n</code></pre>"},{"location":"convention/#publication-plugin","title":"Publication plugin","text":"<pre><code>plugins {\n    // This plugin will create publication to sonatype repository\n    id(\"ru.astrainteractive.gradleplugin.publication\")\n}\n</code></pre> <p>In your gradle.properties</p> <pre><code>makeevrserg.publish.name=AstraLibs\nmakeevrserg.publish.groupId=ru.astrainteractive.astralibs\nmakeevrserg.publish.description=Core utilities for spigot development\nmakeevrserg.publish.repo.org=Astra-Interactive\nmakeevrserg.publish.repo.name=AstraLibs\nmakeevrserg.publish.license=Custom\n</code></pre> <p>In your local.properties</p> <pre><code>OSSRH_USERNAME=OSSRH_USERNAME\nOSSRH_PASSWORD=OSSRH_PASSWORD\nSIGNING_KEY=SIGNING_KEY\nSIGNING_KEY_ID=SIGNING_KEY_ID\nSIGNING_PASSWORD=SIGNING_PASSWORD\n</code></pre>"},{"location":"minecraft/","title":"Minecraft","text":""},{"location":"minecraft/#minecraft-plugins","title":"Minecraft plugins","text":""},{"location":"minecraft/#setup-shadow","title":"Setup Shadow","text":"<pre><code>plugins {\n    alias(libs.plugins.klibs.gradle.minecraft.shadow)\n}\n</code></pre> <pre><code>setupShadow {\n    // Setup default configuration\n    configureDefaults()\n    // Change file destination\n    destination = File(\"/home/server/plugins\")\n        .takeIf { it.exists() }\n        ?: File(rootDir, \"jars\")\n\n    // Here you can configure it more precisely\n    requireShadowJarTask.configure {\n        minimize {\n            exclude(dependency(libs.exposed.jdbc.get()))\n            exclude(dependency(libs.exposed.dao.get()))\n        }\n    }\n}\n</code></pre>"},{"location":"minecraft/#setup-resource-processor","title":"Setup resource processor","text":"<pre><code>plugins {\n    alias(libs.plugins.klibs.gradle.minecraft.resource.processor)\n}\n\nminecraftProcessResource {\n    spigotResourceProcessor.process {\n        expand(\"{some_prop}\" to 10)\n    }\n}\n</code></pre>"}]}